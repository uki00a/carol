export default ""use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
function assert(expr, msg) {
    if (msg === void 0) { msg = ""; }
    if (!expr) {
        throw new Error("assertion failed: " + msg);
    }
}
function isCookiePayload(x) {
    return x.cookie;
}
function isCookieResponse(x) {
    return x.cookieResponse;
}
function isResponse(x) {
    return typeof x.rid === "number";
}
var handleSymbol = Symbol("handle");
var Handle = (function () {
    function Handle(localAddress_, address_, descriptor_, rpc_) {
        this.localAddress_ = localAddress_;
        this.address_ = address_;
        this.descriptor_ = descriptor_;
        this.rpc_ = rpc_;
        this.object_ = null;
        var target = {};
        target[handleSymbol] = this;
        this.proxy_ = new Proxy(target, { get: Handle.proxyHandler_ });
    }
    Handle.proxyHandler_ = function (target, methodName, _receiver) {
        var handle = target[handleSymbol];
        if (methodName === handleSymbol) {
            return handle;
        }
        if (typeof methodName !== "string") {
            return;
        }
        if (methodName === "then") {
            return target[methodName];
        }
        return handle.callMethod_.bind(handle, methodName);
    };
    Handle.prototype.callMethod_ = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, Promise, function () {
            var message, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        message = {
                            m: method,
                            p: this.rpc_.wrap_(args),
                        };
                        return [4, this.rpc_.sendCommand_(this.address_, this.localAddress_, message)];
                    case 1:
                        response = _a.sent();
                        return [2, this.rpc_.unwrap_(response)];
                }
            });
        });
    };
    Handle.prototype.dispatchMessage_ = function (message) {
        return __awaiter(this, void 0, Promise, function () {
            var result_1, value, result;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        assert(this.object_);
                        if (!this.descriptor_.isFunc) return [3, 2];
                        assert(typeof this.object_ === "function");
                        return [4, this.object_.apply(this, this.rpc_.unwrap_(message.p))];
                    case 1:
                        result_1 = _b.sent();
                        return [2, this.rpc_.wrap_(result_1)];
                    case 2:
                        if (message.m.startsWith("_") || message.m.endsWith("_")) {
                            throw new Error("Private members are not exposed over RPC: '" + message.m + "'");
                        }
                        assert(typeof this.object_ === "object");
                        if (!(message.m in this.object_)) {
                            throw new Error("There is no member '" + message.m + "' in '" + this.descriptor_.name + "'");
                        }
                        value = this.object_[message.m];
                        if (typeof value !== "function") {
                            if (message.p.length) {
                                throw new Error("'" + message.m + "' is not a function, can't pass args '" + message.p + "'");
                            }
                            return [2, this.rpc_.wrap_(value)];
                        }
                        return [4, (_a = this.object_)[message.m].apply(_a, this.rpc_.unwrap_(message.p))];
                    case 3:
                        result = _b.sent();
                        return [2, this.rpc_.wrap_(result)];
                }
            });
        });
    };
    Handle.prototype.proxy = function () {
        return this.proxy_;
    };
    return Handle;
}());
var Rpc = (function () {
    function Rpc() {
        this.lastHandleId_ = 0;
        this.lastWorldId_ = 0;
        this.worlds_ = new Map();
        this.idToHandle_ = new Map();
        this.lastMessageId_ = 0;
        this.callbacks_ = new Map();
        this.worldId_ = ".";
        this.cookieResponseCallbacks_ = new Map();
        this.debug_ = false;
    }
    Rpc.prototype.params = function () {
        return this.worldParams_;
    };
    Rpc.prototype.createWorld = function (transport) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var worldId = this.worldId_ + "/" + (++this.lastWorldId_);
        var sendToChild = transport(this.routeMessage_.bind(this, false));
        this.worlds_.set(worldId, sendToChild);
        sendToChild({ cookie: true, args: this.wrap_(args), worldId: worldId });
        return new Promise(function (f) { return _this.cookieResponseCallbacks_.set(worldId, f); });
    };
    Rpc.prototype.disposeWorld = function (worldId) {
        if (!this.worlds_.has(worldId)) {
            throw new Error("No world with given id exists");
        }
        this.worlds_.delete(worldId);
    };
    Rpc.prototype.initWorld = function (transport, initializer) {
        var _this = this;
        this.sendToParent_ = transport(this.routeMessage_.bind(this, true));
        return new Promise(function (f) {
            return _this.cookieCallback_ = f;
        })
            .then(function (args) { return initializer ? initializer.apply(void 0, args) : undefined; })
            .then(function (response) {
            return _this.sendToParent_({
                cookieResponse: true,
                worldId: _this.worldId_,
                r: _this.wrap_(response),
            });
        });
    };
    Rpc.prototype.handle = function (object) {
        if (!object) {
            throw new Error("Can only create handles for objects");
        }
        if (typeof object === "object" && handleSymbol in object) {
            throw new Error("Can not return handle to handle.");
        }
        var descriptor = this.describe_(object);
        var address = [
            this.worldId_,
            descriptor.name + "#" + (++this.lastHandleId_),
        ];
        var handle = new Handle(address, address, descriptor, this);
        handle.object_ = object;
        this.idToHandle_.set(address[1], handle);
        return handle.proxy();
    };
    Rpc.prototype.object = function (proxy) {
        return proxy[handleSymbol].object_ || null;
    };
    Rpc.prototype.dispose = function (proxy) {
        var handle = proxy[handleSymbol];
        if (!handle.object_) {
            throw new Error("Can only dipose handle that was explicitly created with rpc.handle()");
        }
        this.idToHandle_.delete(handle.address_[1]);
    };
    Rpc.prototype.describe_ = function (o) {
        if (typeof o === "function") {
            return { isFunc: true };
        }
        return { name: o.constructor.name };
    };
    Rpc.prototype.wrap_ = function (param, maxDepth) {
        var _this = this;
        if (maxDepth === void 0) { maxDepth = 1000; }
        if (!maxDepth) {
            throw new Error("Object reference chain is too long");
        }
        maxDepth--;
        if (!param) {
            return param;
        }
        if (param[handleSymbol]) {
            var handle = param[handleSymbol];
            return {
                __rpc_a__: handle.address_,
                descriptor: handle.descriptor_,
            };
        }
        if (param instanceof Array) {
            return param.map(function (item) { return _this.wrap_(item, maxDepth); });
        }
        if (typeof param === "object") {
            var result = {};
            for (var key in param) {
                result[key] = this.wrap_(param[key], maxDepth);
            }
            return result;
        }
        return param;
    };
    Rpc.prototype.unwrap_ = function (param) {
        var _this = this;
        if (!param) {
            return param;
        }
        if (param.__rpc_a__) {
            var handle_1 = this.createHandle_(param.__rpc_a__, param.descriptor);
            if (handle_1.descriptor_.isFunc) {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return handle_1.callMethod_.apply(handle_1, __spreadArrays(["call"], args));
                };
            }
            return handle_1.proxy();
        }
        if (param instanceof Array) {
            return param.map(function (item) { return _this.unwrap_(item); });
        }
        if (typeof param === "object") {
            var result = {};
            for (var key in param) {
                result[key] = this.unwrap_(param[key]);
            }
            return result;
        }
        return param;
    };
    Rpc.prototype.createHandle_ = function (address, descriptor) {
        if (address[0] === this.worldId_) {
            var existing = this.idToHandle_.get(address[1]);
            if (existing) {
                return existing;
            }
        }
        var localAddress = [
            this.worldId_,
            descriptor.name + "#" + (++this.lastHandleId_),
        ];
        return new Handle(localAddress, address, descriptor, this);
    };
    Rpc.prototype.sendCommand_ = function (to, from, message) {
        var _this = this;
        var payload = {
            to: to,
            from: from,
            message: message,
            id: ++this.lastMessageId_,
        };
        if (this.debug_) {
            console.log("\nSEND", payload);
        }
        var result = new Promise(function (fulfill, reject) {
            return _this.callbacks_.set(payload.id, { fulfill: fulfill, reject: reject });
        });
        this.routeMessage_(false, payload);
        return result;
    };
    Rpc.prototype.routeMessage_ = function (fromParent, payload) {
        if (this.debug_) {
            console.log("\nROUTE[" + this.worldId_ + "]", payload);
        }
        if (isCookiePayload(payload)) {
            this.worldId_ = payload.worldId;
            this.cookieCallback_(this.unwrap_(payload.args));
            this.cookieCallback_ = null;
            return;
        }
        if (isCookieResponse(payload)) {
            var callback = this.cookieResponseCallbacks_.get(payload.worldId);
            this.cookieResponseCallbacks_.delete(payload.worldId);
            callback({ result: this.unwrap_(payload.r), worldId: payload.worldId });
            return;
        }
        if (!fromParent && !this.isActiveWorld_(payload.from[0])) {
            if (this.debug_) {
                console.log("DROP ON THE FLOOR");
            }
            return;
        }
        if (payload.to[0] === this.worldId_) {
            if (this.debug_) {
                console.log("ROUTED TO SELF");
            }
            this.dispatchMessageLocally_(payload);
            return;
        }
        for (var _i = 0, _a = this.worlds_; _i < _a.length; _i++) {
            var _b = _a[_i], worldId = _b[0], worldSend = _b[1];
            if (payload.to[0].startsWith(worldId)) {
                if (this.debug_) {
                    console.log("ROUTED TO CHILD " + worldId);
                }
                worldSend(payload);
                return;
            }
        }
        if (payload.to[0].startsWith(this.worldId_)) {
            if (this.debug_) {
                console.log("DROP ON THE FLOOR");
            }
            return;
        }
        if (this.debug_) {
            console.log("ROUTED TO PARENT");
        }
        this.sendToParent_(payload);
    };
    Rpc.prototype.isActiveWorld_ = function (worldId) {
        if (this.worldId_ === worldId) {
            return true;
        }
        for (var _i = 0, _a = this.worlds_.keys(); _i < _a.length; _i++) {
            var wid = _a[_i];
            if (worldId.startsWith(wid)) {
                return true;
            }
        }
        return false;
    };
    Rpc.prototype.dispatchMessageLocally_ = function (payload) {
        return __awaiter(this, void 0, Promise, function () {
            var _a, fulfill, reject, message, handle, _b, e_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.debug_) {
                            console.log("\nDISPATCH", payload);
                        }
                        if (isResponse(payload)) {
                            _a = this.callbacks_.get(payload.rid), fulfill = _a.fulfill, reject = _a.reject;
                            this.callbacks_.delete(payload.rid);
                            if (payload.e) {
                                reject(new Error(payload.e));
                            }
                            else {
                                fulfill(payload.r);
                            }
                            return [2];
                        }
                        message = {
                            from: payload.to,
                            rid: payload.id,
                            to: payload.from,
                        };
                        handle = this.idToHandle_.get(payload.to[1]);
                        if (!!handle) return [3, 1];
                        message.e = "Object has been diposed.";
                        return [3, 4];
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        _b = message;
                        return [4, handle.dispatchMessage_(payload.message)];
                    case 2:
                        _b.r = _c.sent();
                        return [3, 4];
                    case 3:
                        e_1 = _c.sent();
                        message.e = e_1.toString() + "\n" + e_1.stack;
                        return [3, 4];
                    case 4:
                        this.routeMessage_(false, message);
                        return [2];
                }
            });
        });
    };
    return Rpc;
}());
exports.default = new Rpc();
";
